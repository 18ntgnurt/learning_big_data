server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: info

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # System logs
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          service: system
          __path__: /var/log/**/*.log

  # Docker container logs
  - job_name: containers
    static_configs:
      - targets:
          - localhost
        labels:
          job: containers
          service: docker
          __path__: /var/lib/docker/containers/*/*log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            attrs:
      - json:
          expressions:
            tag:
          source: attrs
      - regex:
          expression: (?P<container_name>(?:[^|]*))\|
          source: tag
      - timestamp:
          format: RFC3339Nano
          source: time
      - labels:
          stream:
          container_name:
      - output:
          source: output

  # ETL Engine logs
  - job_name: etl-engine
    static_configs:
      - targets:
          - localhost
        labels:
          job: etl-engine
          service: etl
          component: engine
          __path__: /var/lib/docker/containers/*etl-engine*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      - timestamp:
          format: RFC3339Nano
          source: time
      - regex:
          expression: '(?P<level>INFO|WARN|ERROR|DEBUG)\s+(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2})\s+(?P<class>[^\s]+)\s+-\s+(?P<message>.*)'
          source: output
      - labels:
          level:
          class:
      - output:
          source: message

  # Kafka Streams logs
  - job_name: kafka-streams
    static_configs:
      - targets:
          - localhost
        labels:
          job: kafka-streams
          service: kafka
          component: streams
          __path__: /var/lib/docker/containers/*kafka-streams*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      - timestamp:
          format: RFC3339Nano
          source: time
      - regex:
          expression: '(?P<level>INFO|WARN|ERROR|DEBUG)\s+(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2})\s+(?P<thread>\[[^\]]+\])\s+(?P<class>[^\s]+)\s+-\s+(?P<message>.*)'
          source: output
      - labels:
          level:
          thread:
          class:
      - output:
          source: message

  # Fraud Detection API logs
  - job_name: fraud-api
    static_configs:
      - targets:
          - localhost
        labels:
          job: fraud-api
          service: fraud-detection
          component: api
          __path__: /var/lib/docker/containers/*fraud-api*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      - timestamp:
          format: RFC3339Nano
          source: time
      - regex:
          expression: '(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}),(?P<level>INFO|WARN|ERROR|DEBUG)\s+-\s+(?P<module>[^\s]+)\s+-\s+(?P<message>.*)'
          source: output
      - labels:
          level:
          module:
      - output:
          source: message

  # Kafka logs
  - job_name: kafka
    static_configs:
      - targets:
          - localhost
        labels:
          job: kafka
          service: kafka
          component: broker
          __path__: /var/lib/docker/containers/*kafka*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      - timestamp:
          format: RFC3339Nano
          source: time
      - regex:
          expression: '\[(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2},\d{3})\]\s+(?P<level>INFO|WARN|ERROR|DEBUG)\s+(?P<message>.*)\s+\((?P<class>[^)]+)\)'
          source: output
      - labels:
          level:
          class:
      - output:
          source: message

  # MLflow logs
  - job_name: mlflow
    static_configs:
      - targets:
          - localhost
        labels:
          job: mlflow
          service: mlflow
          component: tracking
          __path__: /var/lib/docker/containers/*mlflow*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      - timestamp:
          format: RFC3339Nano
          source: time
      - regex:
          expression: '(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}),(?P<level>INFO|WARN|ERROR|DEBUG)\s+-\s+(?P<module>[^\s]+)\s+-\s+(?P<message>.*)'
          source: output
      - labels:
          level:
          module:
      - output:
          source: message

  # PostgreSQL logs
  - job_name: postgres
    static_configs:
      - targets:
          - localhost
        labels:
          job: postgres
          service: database
          component: postgres
          __path__: /var/lib/docker/containers/*postgres*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      - timestamp:
          format: RFC3339Nano
          source: time
      - regex:
          expression: '(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\.\d{3})\s+UTC\s+\[(?P<pid>\d+)\]\s+(?P<level>LOG|ERROR|WARNING|INFO):\s+(?P<message>.*)'
          source: output
      - labels:
          level:
          pid:
      - output:
          source: message

  # Redis logs
  - job_name: redis
    static_configs:
      - targets:
          - localhost
        labels:
          job: redis
          service: database
          component: redis
          __path__: /var/lib/docker/containers/*redis*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      - timestamp:
          format: RFC3339Nano
          source: time
      - regex:
          expression: '(?P<pid>\d+):(?P<role>[MCXS])\s+(?P<timestamp>\d{2}\s+\w{3}\s+\d{4}\s+\d{2}:\d{2}:\d{2}\.\d{3})\s+(?P<level>[*#-])\s+(?P<message>.*)'
          source: output
      - labels:
          pid:
          role:
          level:
      - output:
          source: message

  # Monitoring services logs
  - job_name: monitoring
    static_configs:
      - targets:
          - localhost
        labels:
          job: monitoring
          service: monitoring
          __path__: /var/lib/docker/containers/*{prometheus,grafana,alertmanager}*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      - timestamp:
          format: RFC3339Nano
          source: time
      - regex:
          expression: 'level=(?P<level>info|warn|error|debug)\s+ts=(?P<ts>[^\s]+)\s+(?P<message>.*)'
          source: output
      - labels:
          level:
      - output:
          source: message

  # Application error logs (higher priority)
  - job_name: errors
    static_configs:
      - targets:
          - localhost
        labels:
          job: errors
          service: application
          severity: error
          __path__: /var/lib/docker/containers/*/*log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      - timestamp:
          format: RFC3339Nano
          source: time
      - match:
          selector: '{job="errors"}'
          stages:
            - regex:
                expression: '(?i)(?P<level>error|exception|fatal|critical)'
                source: output
            - labels:
                level:
      - output:
          source: output

# Global configuration
global:
  scrape_interval: 15s
  
# Limits to prevent memory issues
limits_config:
  readline_rate: 10000
  readline_burst: 20000 