version: '3.8'

services:
  # ============================================
  # CORE MONITORING SERVICES
  # ============================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: bigdata-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - ./prometheus/alerts:/etc/prometheus/alerts
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--alertmanager.notification-queue-capacity=10000'
      - '--query.max-concurrency=50'
    networks:
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: bigdata-grafana
    ports:
      - "3000:3000"
    environment:
      # Security
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY:-bigdata-secret-key}
      
      # Plugins
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel,redis-datasource,prometheus-data-source
      
      # Rendering
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
      
      # Features
      GF_FEATURE_TOGGLES_ENABLE: publicDashboards
      GF_ANALYTICS_REPORTING_ENABLED: false
      
      # Performance
      GF_DATABASE_MAX_OPEN_CONN: 300
      GF_DATABASE_MAX_IDLE_CONN: 10
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboard-configs:/var/lib/grafana/dashboards
      - ./grafana/plugins:/var/lib/grafana/plugins
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Image Renderer
  renderer:
    image: grafana/grafana-image-renderer:3.7.0
    container_name: bigdata-renderer
    ports:
      - "8081:8081"
    environment:
      ENABLE_METRICS: true
      HTTP_PORT: 8081
      LOG_LEVEL: info
    networks:
      - monitoring-network
    restart: unless-stopped

  # AlertManager for alerting
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: bigdata-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./alertmanager/templates:/etc/alertmanager/templates
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
      - '--cluster.listen-address=0.0.0.0:9094'
    networks:
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # SYSTEM MONITORING EXPORTERS
  # ============================================

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: bigdata-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.netdev.device-exclude=^(veth|docker|br-).*'
      - '--collector.diskstats.ignored-devices=^(ram|loop|fd|(h|s|v)d[a-z]|nvme\\d+n\\d+p)\\d+$'
    networks:
      - monitoring-network
    restart: unless-stopped
    pid: host

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: bigdata-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    command:
      - '--port=8080'
      - '--profiling'
      - '--housekeeping_interval=30s'
      - '--docker_only=true'
      - '--storage_duration=2h'
    networks:
      - monitoring-network
    restart: unless-stopped

  # ============================================
  # APPLICATION-SPECIFIC EXPORTERS
  # ============================================

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.50.0
    container_name: bigdata-redis-exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-""}
      REDIS_ALIAS: bigdata-redis
    networks:
      - monitoring-network
    restart: unless-stopped

  # Kafka Exporter for Kafka metrics
  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.6.0
    container_name: bigdata-kafka-exporter
    ports:
      - "9308:9308"
    command:
      - '--kafka.server=kafka:9092'
      - '--web.listen-address=0.0.0.0:9308'
      - '--log.level=info'
      - '--kafka.version=2.8.0'
    networks:
      - monitoring-network
    restart: unless-stopped

  # Postgres Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.12.0
    container_name: bigdata-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://bigdata_user:bigdata_pass@postgres:5432/bigdata?sslmode=disable"
      PG_EXPORTER_INCLUDE_DATABASES: bigdata,feature_store
      PG_EXPORTER_AUTO_DISCOVER_DATABASES: true
    networks:
      - monitoring-network
    restart: unless-stopped

  # MySQL Exporter for database metrics
  mysql-exporter:
    image: prom/mysqld-exporter:v0.14.0
    container_name: bigdata-mysql-exporter
    ports:
      - "9104:9104"
    environment:
      DATA_SOURCE_NAME: "bigdata_user:bigdata_pass@(mysql:3306)/bigdata"
    networks:
      - monitoring-network
    restart: unless-stopped

  # Blackbox Exporter for endpoint monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: bigdata-blackbox-exporter
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'
      - '--web.listen-address=:9115'
    networks:
      - monitoring-network
    restart: unless-stopped

  # ============================================
  # CUSTOM MONITORING SERVICES
  # ============================================

  # MLflow metrics exporter (custom)
  mlflow-exporter:
    build:
      context: ./exporters/mlflow
      dockerfile: Dockerfile
    container_name: bigdata-mlflow-exporter
    ports:
      - "9401:9401"
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      EXPORTER_PORT: 9401
      SCRAPE_INTERVAL: 30
      LOG_LEVEL: INFO
    networks:
      - monitoring-network
    restart: unless-stopped

  # Fraud Detection metrics exporter (custom)
  fraud-exporter:
    build:
      context: ./exporters/fraud-detection
      dockerfile: Dockerfile
    container_name: bigdata-fraud-exporter
    ports:
      - "9402:9402"
    environment:
      FRAUD_API_URL: http://fraud-api:5001
      EXPORTER_PORT: 9402
      SCRAPE_INTERVAL: 15
      LOG_LEVEL: INFO
    networks:
      - monitoring-network
    restart: unless-stopped

  # Data Quality Monitor exporter
  data-quality-exporter:
    build:
      context: ./exporters/data-quality
      dockerfile: Dockerfile
    container_name: bigdata-data-quality-exporter
    ports:
      - "9403:9403"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_URL: postgresql://bigdata_user:bigdata_pass@postgres:5432/bigdata
      EXPORTER_PORT: 9403
      CHECK_INTERVAL: 60
      LOG_LEVEL: INFO
    networks:
      - monitoring-network
    restart: unless-stopped

  # Kafka Lag Exporter
  kafka-lag-exporter:
    image: lightbend/kafka-lag-exporter:0.6.8
    container_name: bigdata-kafka-lag-exporter
    ports:
      - "8000:8000"
    volumes:
      - ./kafka-lag-exporter/application.conf:/opt/docker/conf/application.conf
    environment:
      KAFKA_LAG_EXPORTER_KAFKA_BROKERS: kafka:9092
    networks:
      - monitoring-network
    restart: unless-stopped

  # ============================================
  # LOG AGGREGATION SERVICES
  # ============================================

  # Log aggregation with Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: bigdata-loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring-network
    restart: unless-stopped

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: bigdata-promtail
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      - loki

# ============================================
# VOLUMES
# ============================================
volumes:
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  alertmanager-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/alertmanager
  loki-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/loki

# ============================================
# NETWORKS
# ============================================
networks:
  monitoring-network:
    driver: bridge
    name: bigdata-monitoring
    ipam:
      config:
        - subnet: 172.21.0.0/16
    external: false 