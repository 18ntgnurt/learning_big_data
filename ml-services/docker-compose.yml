version: '3.8'

# ðŸš€ ML Services Platform - Professional MVC Architecture
# Complete microservices setup with proper separation of concerns

services:
  # Main ML Services Application
  ml-services:
    build:
      context: .
      dockerfile: app/Dockerfile
    container_name: ml-services-app
    ports:
      - "5000:5000"
      - "8000:8000"  # Metrics port
    environment:
      # Flask Configuration
      - FLASK_ENV=production
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      
      # Database Configuration
      - DATABASE_URL=postgresql://user:password@postgres:5432/bigdata
      - REDIS_URL=redis://redis:6379/0
      
      # MLflow Configuration
      - MLFLOW_TRACKING_URI=http://mlflow:5002
      - MLFLOW_ARTIFACT_LOCATION=/mlruns
      
      # Kafka Configuration
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ENABLE_KAFKA_STREAMING=true
      
      # Feature Flags
      - ENABLE_RATE_LIMITING=true
      - ENABLE_METRICS=true
      - ENABLE_FEATURE_STORE=true
      - ENABLE_MODEL_CACHING=true
      
      # Business Logic Configuration
      - MAX_BATCH_SIZE=100
      - MAX_CONCURRENT_TRAINING_JOBS=3
      
    volumes:
      - ml_models:/app/models
      - ml_data:/app/data
      - ml_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - kafka
      - mlflow
    networks:
      - ml-services-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ml-services-postgres
    environment:
      - POSTGRES_DB=bigdata
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ml-services-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d bigdata"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: ml-services-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ml-services-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka for Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ml-services-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ml-services-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ml-services-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - ml-services-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Schema Registry for Kafka
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: ml-services-schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - ml-services-network
    restart: unless-stopped

  # MLflow Tracking Server
  mlflow:
    image: python:3.9-slim
    container_name: ml-services-mlflow
    ports:
      - "5002:5002"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://user:password@postgres:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlruns
    volumes:
      - mlflow_artifacts:/mlruns
    depends_on:
      - postgres
    networks:
      - ml-services-network
    restart: unless-stopped
    command: >
      sh -c "
        pip install mlflow psycopg2-binary &&
        mlflow server 
        --host 0.0.0.0 
        --port 5002 
        --backend-store-uri postgresql://user:password@postgres:5432/mlflow 
        --default-artifact-root /mlruns
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kafka UI for Management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ml-services-kafka-ui
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "9090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    networks:
      - ml-services-network
    restart: unless-stopped

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ml-services-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ml-services-network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ml-services-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - ml-services-network
    restart: unless-stopped

# Networks
networks:
  ml-services-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mlflow_artifacts:
    driver: local
  ml_models:
    driver: local
  ml_data:
    driver: local
  ml_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 